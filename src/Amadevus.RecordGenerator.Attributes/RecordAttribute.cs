using CodeGeneration.Roslyn;
using System;
using System.Diagnostics;

namespace Amadevus.RecordGenerator
{
    /// <summary>
    /// This attribute triggers record code generation. <see href="https://amis92.github.io/RecordGenerator/"/>
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = false)]
    [CodeGenerationAttribute("Amadevus.RecordGenerator.Generators.RecordGenerator, Amadevus.RecordGenerator.Generators")]
    [Conditional("CodeGeneration")]
    public sealed class RecordAttribute : Attribute
    {
        /// <summary>
        /// For the annotated type, generate <paramref name="features"/>.
        /// </summary>
        /// <param name="features">Value for <see cref="Features"/>.</param>
        public RecordAttribute(Features features = Features.Default)
        {
            Features = features;
        }

        /// <summary>
        /// Features requested to be generated by RecordGenerator.
        /// Defaults to <see cref="Features.Default"/>.
        /// </summary>
        public Features Features { get; }
    }
}