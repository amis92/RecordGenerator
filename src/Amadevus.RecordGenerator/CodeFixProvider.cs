using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Composition;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CodeFixes;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Rename;
using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis.Formatting;
using System.Reflection;

namespace Amadevus.RecordGenerator
{
    [ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(RecordGeneratorCodeFixProvider)), Shared]
    public class RecordGeneratorCodeFixProvider : CodeFixProvider
    {
        private const string title = "Generate RecordAttribute declaration";
        private string _versionString;

        public sealed override ImmutableArray<string> FixableDiagnosticIds
        {
            get
            {
                return
                    ImmutableArray.Create(
                        RecordGeneratorAnalyzer.MissingRecordAttributeDeclarationDiagnostic.DiagnosticId,
                        RecordGeneratorAnalyzer.MissingRecordPartialDiagnostic.DiagnosticId);
            }
        }

        public sealed override FixAllProvider GetFixAllProvider()
        {
            // See https://github.com/dotnet/roslyn/blob/master/docs/analyzers/FixAllProvider.md for more information on Fix All Providers
            return WellKnownFixAllProviders.BatchFixer;
        }

        public sealed override async Task RegisterCodeFixesAsync(CodeFixContext context)
        {
            var root = await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);

            foreach (var diagnostic in context.Diagnostics)
            {

                var diagnosticSpan = diagnostic.Location.SourceSpan;
                switch (diagnostic.Id)
                {
                    case RecordGeneratorAnalyzer.MissingRecordAttributeDeclarationDiagnostic.DiagnosticId:
                        {
                            // Find the attribute identifier syntax
                            var declaration = root.FindToken(diagnosticSpan.Start).Parent.AncestorsAndSelf().OfType<IdentifierNameSyntax>().First();
                            context.RegisterCodeFix(
                                CodeAction.Create(
                                    title: title,
                                    createChangedSolution: c => CreateRecordAttributeDeclarationDocumentAsync(context.Document, declaration, c),
                                    equivalenceKey: title),
                                diagnostic);
                        }
                        break;
                    case RecordGeneratorAnalyzer.MissingRecordPartialDiagnostic.DiagnosticId:
                        {
                            // Find the type declaration identified by the diagnostic.
                            //var declaration = root.FindToken(diagnosticSpan.Start).Parent.AncestorsAndSelf().OfType<TypeDeclarationSyntax>().First();


                            // Register a code action that will invoke the fix.
                            //context.RegisterCodeFix(
                            //    CodeAction.Create(
                            //        title: title,
                            //        createChangedSolution: c => MakeUppercaseAsync(context.Document, declaration, c),
                            //        equivalenceKey: title),
                            //    diagnostic);
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        private string VersionString => _versionString ?? (_versionString = GetType().GetTypeInfo().Assembly.GetName().Version.ToString());

        private Task<Solution> CreateRecordAttributeDeclarationDocumentAsync(Document document, IdentifierNameSyntax declaration, CancellationToken c)
        {
            // get the namespace of document or namespace from attribute usage

            var namespaces = declaration
                .Ancestors()
                .OfType<NamespaceDeclarationSyntax>()
                .Reverse()
                .Select(nsSyntax => nsSyntax.Name.ToString())
                .ToArray();
            var targetNamespace = string.Join(".", namespaces);

            var text = 
$@"namespace {targetNamespace}
{{
    /// <summary>
    /// Identifies class or struct that is supposed to have a partial with ctor and mutators generated by source generator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode(""{nameof(RecordGenerator)}"", ""{VersionString}"")]
    [System.Diagnostics.Conditional(""NEVER"")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited = false, AllowMultiple = false)]
    internal sealed class RecordAttribute : System.Attribute
    {{
            public RecordAttribute()
            {{
            }}


            public string PrimaryCtorAccess {{ get; set; }} = ""public"";

            /// <summary>
            /// Gets or sets whether mutator methods should be generated (e.g. WithSurname). Default is true.
            /// </summary>
            public bool GenerateMutators {{ get; set; }} = true;


            /// <summary>
            /// Gets or sets whether collection mutator methods should be generated (e.g. AddItems, ReplaceItems). Default is true.
            /// </summary>
            public bool GenerateCollectionMutators {{ get; set; }} = true;
    }}
}}
";
            var tree = CSharpSyntaxTree.ParseText(text, cancellationToken: c);
            var formattedRoot = Formatter.Format(tree.GetRoot(), document.Project.Solution.Workspace, cancellationToken: c);
            var doc = document.Project.AddDocument("RecordAttribute.cs", formattedRoot, document.Folders);
            return Task.FromResult(doc.Project.Solution);
        }

        private async Task<Solution> MakeUppercaseAsync(Document document, TypeDeclarationSyntax typeDecl, CancellationToken cancellationToken)
        {
            // Compute new uppercase name.
            var identifierToken = typeDecl.Identifier;
            var newName = identifierToken.Text.ToUpperInvariant();

            // Get the symbol representing the type to be renamed.
            var semanticModel = await document.GetSemanticModelAsync(cancellationToken);
            var typeSymbol = semanticModel.GetDeclaredSymbol(typeDecl, cancellationToken);

            // Produce a new solution that has all references to that type renamed, including the declaration.
            var originalSolution = document.Project.Solution;
            var optionSet = originalSolution.Workspace.Options;
            var newSolution = await Renamer.RenameSymbolAsync(document.Project.Solution, typeSymbol, newName, optionSet, cancellationToken).ConfigureAwait(false);

            // Return the new solution with the now-uppercase type name.
            return newSolution;
        }
    }
}